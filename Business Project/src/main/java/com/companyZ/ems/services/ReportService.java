package com.companyZ.ems.services;

import com.companyZ.ems.models.Employee;
import com.companyZ.ems.utils.DatabaseConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.io.File;

/**
 * Service class for generating various reports in the EMS.
 * Supports exporting data to Excel format and generating statistical analyses.
 */
public class ReportService {
    private static final Logger logger = LogManager.getLogger(ReportService.class);
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static final DateTimeFormatter TIMESTAMP_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    /**
     * Adds report metadata to the workbook.
     */
    private void addReportMetadata(Workbook workbook, String reportType) {
        Sheet metadataSheet = workbook.createSheet("Metadata");
        metadataSheet.setColumnWidth(0, 5000);
        metadataSheet.setColumnWidth(1, 10000);

        CellStyle headerStyle = workbook.createCellStyle();
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerStyle.setFont(headerFont);

        // Add metadata rows
        int rowNum = 0;
        Row row = metadataSheet.createRow(rowNum++);
        Cell labelCell = row.createCell(0);
        labelCell.setCellValue("Report Type:");
        labelCell.setCellStyle(headerStyle);
        row.createCell(1).setCellValue(reportType);

        row = metadataSheet.createRow(rowNum++);
        labelCell = row.createCell(0);
        labelCell.setCellValue("Generated On:");
        labelCell.setCellStyle(headerStyle);
        row.createCell(1).setCellValue(LocalDate.now().format(TIMESTAMP_FORMATTER));

        row = metadataSheet.createRow(rowNum++);
        labelCell = row.createCell(0);
        labelCell.setCellValue("Generated By:");
        labelCell.setCellStyle(headerStyle);
        row.createCell(1).setCellValue(System.getProperty("user.name"));
    }

    /**
     * Creates and returns a header style for Excel cells.
     */
    private CellStyle createHeaderStyle(Workbook workbook) {
        CellStyle headerStyle = workbook.createCellStyle();
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerStyle.setFont(headerFont);
        headerStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        headerStyle.setBorderBottom(BorderStyle.THIN);
        headerStyle.setBorderTop(BorderStyle.THIN);
        headerStyle.setBorderLeft(BorderStyle.THIN);
        headerStyle.setBorderRight(BorderStyle.THIN);
        return headerStyle;
    }

    /**
     * Creates and returns a currency style for Excel cells.
     */
    private CellStyle createCurrencyStyle(Workbook workbook) {
        CellStyle currencyStyle = workbook.createCellStyle();
        DataFormat format = workbook.createDataFormat();
        currencyStyle.setDataFormat(format.getFormat("$#,##0.00"));
        currencyStyle.setBorderBottom(BorderStyle.THIN);
        currencyStyle.setBorderTop(BorderStyle.THIN);
        currencyStyle.setBorderLeft(BorderStyle.THIN);
        currencyStyle.setBorderRight(BorderStyle.THIN);
        return currencyStyle;
    }

    /**
     * Generates an employee roster report in Excel format.
     *
     * @param filePath The path where the Excel file should be saved
     * @throws Exception if report generation fails
     */
    public void generateEmployeeRoster(String filePath) throws Exception {
        try (Workbook workbook = new XSSFWorkbook()) {
            // Add metadata sheet
            addReportMetadata(workbook, "Employee Roster Report");

            Sheet sheet = workbook.createSheet("Employee Roster");
            sheet.setColumnWidth(1, 6000); // Name column
            sheet.setColumnWidth(5, 10000); // Address column

            // Create header row with enhanced style
            Row headerRow = sheet.createRow(0);
            String[] headers = { "Employee ID", "Name", "Division", "Job Title", "Hire Date", "Address" };
            CellStyle headerStyle = createHeaderStyle(workbook);

            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(headerStyle);
            }

            // Fetch and write employee data
            ObservableList<Employee> employees = fetchEmployeesForReport();
            int rowNum = 1;
            for (Employee employee : employees) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(employee.getEmpId());
                row.createCell(1).setCellValue(employee.getName());
                row.createCell(2).setCellValue(employee.getDivision());
                row.createCell(3).setCellValue(employee.getJobTitle());
                row.createCell(4).setCellValue(employee.getHireDate().format(DATE_FORMATTER));
                row.createCell(5).setCellValue(formatAddress(employee));
            }

            // Auto-size columns
            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            // Write to file
            try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                workbook.write(fileOut);
            }
            logger.info("Employee roster report generated successfully at: {}", filePath);
        }
    }

    /**
     * Generates a division summary report in Excel format.
     *
     * @param filePath The path where the Excel file should be saved
     * @throws Exception if report generation fails
     */
    public void generateDivisionSummary(String filePath) throws Exception {
        try (Workbook workbook = new XSSFWorkbook()) {
            // Add metadata sheet
            addReportMetadata(workbook, "Division Summary Report");

            Sheet sheet = workbook.createSheet("Division Summary");
            sheet.setColumnWidth(0, 6000); // Division column

            // Create header row with enhanced style
            Row headerRow = sheet.createRow(0);
            String[] headers = { "Division", "Employee Count", "Average Salary", "Total Salary" };
            CellStyle headerStyle = createHeaderStyle(workbook);
            CellStyle currencyStyle = createCurrencyStyle(workbook);

            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(headerStyle);
            }

            // Fetch and write division statistics
            Map<String, DivisionStats> stats = calculateDivisionStatistics();
            int rowNum = 1;
            for (Map.Entry<String, DivisionStats> entry : stats.entrySet()) {
                Row row = sheet.createRow(rowNum++);
                DivisionStats stat = entry.getValue();

                row.createCell(0).setCellValue(entry.getKey());
                row.createCell(1).setCellValue(stat.employeeCount);

                Cell avgSalaryCell = row.createCell(2);
                avgSalaryCell.setCellValue(stat.averageSalary);
                avgSalaryCell.setCellStyle(currencyStyle);

                Cell totalSalaryCell = row.createCell(3);
                totalSalaryCell.setCellValue(stat.totalSalary);
                totalSalaryCell.setCellStyle(currencyStyle);
            }

            // Auto-size columns
            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            // Write to file
            try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                workbook.write(fileOut);
            }
            logger.info("Division summary report generated successfully at: {}", filePath);
        }
    }

    /**
     * Fetches employees with their complete information for reporting.
     */
    private ObservableList<Employee> fetchEmployeesForReport() throws Exception {
        ObservableList<Employee> employees = FXCollections.observableArrayList();
        String sql = "SELECT e.*, a.street, a.zip, c.city_name, s.state_name, " +
                "d.division_name, j.title_name " +
                "FROM employees e " +
                "JOIN address a ON e.empid = a.empid " +
                "JOIN city c ON a.city_id = c.city_id " +
                "JOIN state s ON a.state_id = s.state_id " +
                "JOIN employee_division ed ON e.empid = ed.empid " +
                "JOIN division d ON ed.div_ID = d.ID " +
                "JOIN employee_job_titles ejt ON e.empid = ejt.empid " +
                "JOIN job_titles j ON ejt.job_title_id = j.job_title_id " +
                "ORDER BY e.name";

        try (Connection conn = DatabaseConnection.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                employees.add(createEmployeeFromResultSet(rs));
            }
        }
        return employees;
    }

    /**
     * Calculates statistics for each division.
     */
    private Map<String, DivisionStats> calculateDivisionStatistics() throws Exception {
        Map<String, DivisionStats> stats = new HashMap<>();
        String sql = "SELECT d.division_name, COUNT(*) as emp_count, " +
                "AVG(e.salary) as avg_salary, SUM(e.salary) as total_salary " +
                "FROM employees e " +
                "JOIN employee_division ed ON e.empid = ed.empid " +
                "JOIN division d ON ed.div_ID = d.ID " +
                "GROUP BY d.division_name " +
                "ORDER BY d.division_name";

        try (Connection conn = DatabaseConnection.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                DivisionStats stat = new DivisionStats();
                stat.employeeCount = rs.getInt("emp_count");
                stat.averageSalary = rs.getDouble("avg_salary");
                stat.totalSalary = rs.getDouble("total_salary");
                stats.put(rs.getString("division_name"), stat);
            }
        }
        return stats;
    }

    /**
     * Creates an Employee object from a ResultSet row.
     */
    private Employee createEmployeeFromResultSet(ResultSet rs) throws Exception {
        Employee employee = new Employee();
        employee.setEmpId(rs.getString("empid"));
        employee.setName(rs.getString("name"));
        employee.setSsn(rs.getString("ssn"));
        employee.setHireDate(rs.getObject("hire_date", LocalDate.class));
        employee.setSalary(rs.getDouble("salary"));
        employee.setDivision(rs.getString("division_name"));
        employee.setJobTitle(rs.getString("title_name"));
        employee.setStreet(rs.getString("street"));
        employee.setCity(rs.getString("city_name"));
        employee.setState(rs.getString("state_name"));
        employee.setZip(rs.getString("zip"));
        return employee;
    }

    /**
     * Formats an employee's address for display.
     */
    private String formatAddress(Employee employee) {
        return String.format("%s, %s, %s %s",
                employee.getStreet(),
                employee.getCity(),
                employee.getState(),
                employee.getZip());
    }

    /**
     * Generates a pay statement report for all employees.
     * Creates an Excel file with employee pay information.
     *
     * @throws Exception if report generation fails
     */
    public void generatePayStatementReport() throws Exception {
        String filePath = "reports/pay_statements_" + LocalDate.now().format(DATE_FORMATTER) + ".xlsx";
        try (Workbook workbook = new XSSFWorkbook()) {
            // Add metadata sheet
            addReportMetadata(workbook, "Pay Statement Report");

            Sheet sheet = workbook.createSheet("Pay Statements");
            sheet.setColumnWidth(1, 6000); // Name column

            // Create header row with enhanced style
            Row headerRow = sheet.createRow(0);
            String[] headers = { "Employee ID", "Name", "Division", "Job Title", "Salary", "Net Pay" };
            CellStyle headerStyle = createHeaderStyle(workbook);
            CellStyle currencyStyle = createCurrencyStyle(workbook);

            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(headerStyle);
            }

            // Fetch and write employee data
            ObservableList<Employee> employees = fetchEmployeesForReport();
            int rowNum = 1;
            for (Employee employee : employees) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(employee.getEmpId());
                row.createCell(1).setCellValue(employee.getName());
                row.createCell(2).setCellValue(employee.getDivision());
                row.createCell(3).setCellValue(employee.getJobTitle());

                Cell salaryCell = row.createCell(4);
                salaryCell.setCellValue(employee.getSalary());
                salaryCell.setCellStyle(currencyStyle);

                Cell netPayCell = row.createCell(5);
                double netPay = calculateNetPay(employee.getSalary());
                netPayCell.setCellValue(netPay);
                netPayCell.setCellStyle(currencyStyle);
            }

            // Auto-size columns
            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            // Ensure reports directory exists
            new File("reports").mkdirs();

            // Write to file
            try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                workbook.write(fileOut);
            }
            logger.info("Pay statement report generated successfully at: {}", filePath);
        }
    }

    /**
     * Calculates the net pay based on gross salary.
     * This is a simplified calculation - in a real system, this would include
     * tax deductions, benefits, etc.
     *
     * @param grossSalary The gross salary
     * @return The calculated net pay
     */
    private double calculateNetPay(double grossSalary) {
        // Simplified calculation: assume 30% total deductions
        return grossSalary * 0.7;
    }

    /**
     * Inner class to hold division statistics.
     */
    private static class DivisionStats {
        int employeeCount;
        double averageSalary;
        double totalSalary;
    }
}